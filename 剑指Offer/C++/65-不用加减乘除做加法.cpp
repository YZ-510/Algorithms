/*
写一个函数，求两个整数之和，要求在函数体内不得使用 +、-、*、/ 四则运算符号。
*/ 

/* 
位运算，把二进制的加法用位运算来替代。
第一步不考虑进位对每一位相加，0 加 0、1 加 1 的结果都是0，0 加 1、1 加 0 的结果都是 1，这和异或的结果是一样的。
第二步进位，对 0 加 0、0 加 1、1 加 0 而言，都不会进位，只有 1 加 1 时会向前产生一个进位。
可以想象成两个数先做位与运算，然后再向左移动一位。只有两个数都是 1 的时候，位与得到的结果是 1，其余都是 0。
第三步把前两个步骤的结果相加，相加的过程依然是重复前面两步，直到不产生进位为止。
*/
class Solution {
public:
    int Add(int num1, int num2)
    {
        int sum, carry;
        do
        {
            sum = num1 ^ num2;
            carry = (num1 & num2) << 1;
            num1 = sum;
            num2 = carry;
        }
        while(num2 != 0);
        
        return num1;
    }
};
